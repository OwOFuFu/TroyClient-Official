package it.md_4.troy.command.impl;

import java.util.Arrays;
import java.util.stream.Collectors;

import it.md_4.troy.Troy;
import it.md_4.troy.command.Command;
import it.md_4.troy.command.CommandInfo;
import it.md_4.troy.exception.CommandException;
import it.md_4.troy.exploit.Exploit;
import it.md_4.troy.exploit.argument.ArgumentParser;
import it.md_4.troy.helper.ChatHelper;
import it.md_4.troy.helper.ExecutorHelper;

@CommandInfo(
        alias = "crash",
        description = "Show or use available exploits",
        usage = "'crash <exploit/list/info> [exploit name / exploit arguments]",
        aliases = {"exploit", "lag"}
)
public class ExploitCommand extends Command {
  public ExploitCommand() {
  }

  public void execute(String... args) throws CommandException {
    if (args.length == 0) {
      ChatHelper.printMessage("&b • &bUsage: &3" + this.getUsage());
    } else {
      if (args[0].equalsIgnoreCase("list")) {
        ChatHelper.printMessage("Available exploits: \n&b • &3" + (String)Troy.INSTANCE.getExploitManager().getExploits().stream().map(Exploit::getName).collect(Collectors.joining("\n&b • &3")));
      } else {
        Exploit exploit;
        if (args[0].equalsIgnoreCase("info") && args.length > 1) {
          exploit = (Exploit)Troy.INSTANCE.getExploitManager().getExploit(args[1]).orElseThrow(() -> {
            return new CommandException(String.format("&b • &bExploit \"&3%s\" &bnot found.\n&3", args[1]));
          });
          ChatHelper.printMessage(String.format("&3%s&f: &b%s\n", exploit.getName(), exploit.getDescription()));
        } else {
          exploit = (Exploit)Troy.INSTANCE.getExploitManager().getExploit(args[0]).orElseThrow(() -> {
            return new CommandException("&b • &bExploit not found. Use \"&3'crash list\" &bto see all exploits.");
          });
          Object[] arguments = ArgumentParser.parseArgs(exploit, (String[]) Arrays.copyOfRange(args, 1, args.length));
          ExecutorHelper.submit(() -> {
            exploit.execute(arguments);
          });
        }
      }

    }
  }
}
